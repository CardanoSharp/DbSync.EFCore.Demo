@using System.Diagnostics;
@using Application.BlockchainTransactions;
@inject MediatR.IMediator _mediator


<div class="card">

    <div class="card-header">
        <h5>Block Explorer</h5>
    </div>

    <div class="card-body">
        <ul class="lisg-group list-group-flush">
            <li class="list-group-item">
                <div class="form-group">
                    <h5>Enter Transaction ID here </h5>
                    <EditForm Model="data" OnValidSubmit="GetTransactionData">
                        <InputNumber @bind-Value="data.UserEnteredEpoch" />
                        <button type="submit">Enter Transaction ID</button>
                    </EditForm>
                </div>
            </li>
            <li class="list-group-item"><h5>Epoch @data.UserEnteredEpoch</h5></li>
            <li class="list-group-item"><h5>Transactions @data.TransactionsInEpoch</h5></li>
        </ul>

    </div>

    <div class="card-footer">
        <h5>Elapsed time to get results: @data.ElapsedTime</h5>
    </div>
</div>
@code {

    private class TransactionDataViewModel
    {
        public int TransactionsInEpoch { get; set; }
        public int UserEnteredEpoch { get; set; }
        public string ElapsedTime { get; set; }

    }

    private TransactionDataViewModel data = new();


    private async Task GetTransactionData()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        string ElapsedTime;
        string id = "340";
        var transactionsInEpoch = await _mediator.Send(new GetTransactionInformation.GetTransactionDataCommand(id));
        TimeSpan result = stopWatch.Elapsed;
        ElapsedTime = String.Format("{0} seconds and {1} miliseconds", result.Seconds, result.Milliseconds);
        StateHasChanged();
    }

}
