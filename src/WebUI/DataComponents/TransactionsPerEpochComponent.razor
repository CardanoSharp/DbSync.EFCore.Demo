@using Application.BlockChainTransactions;
@using Application.EpochData;
@using System.Diagnostics;
@inject MediatR.IMediator _mediator
<div class="card">

    <div class="card-header">
        <h5>Transactions Per Epoch</h5>
    </div>

    <div class="card-body">
        <ul class="lisg-group list-group-flush">
            <li class="list-group-item"><h5>Epoch @data.UserEnteredEpoch</h5></li>
            <li class="list-group-item"><h5>Transactions @data.TransactionsInEpoch</h5></li>
            <li class="list-group-item">
                <div class="form-group">
                    <h5>Or enter your own Epoch: </h5>
                    <EditForm Model="data" OnValidSubmit="TransactionsInUserEnteredEpoch">
                        <InputNumber @bind-Value="data.UserEnteredEpoch" />
                        <button type="submit">Get Transactions In Epoch</button>
                    </EditForm>

                </div>
            </li>
        </ul>

    </div>

    <div class="card-footer">
        <h5>Elapsed time to get results: @data.ElapsedTime</h5>
    </div>
</div>

@code {

    private class TransactionsPerEpochComponentViewModel
    {
        public int TransactionsInEpoch { get; set; }
        public int UserEnteredEpoch { get; set; }
        public string ElapsedTime { get; set; }

    }

    private TransactionsPerEpochComponentViewModel data = new();

    protected override async Task OnInitializedAsync()
    {

        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        var transactionsInEpoch = await _mediator.Send(new TransactionsInCurrentEpoch.TransactionsInCurrentEpochCommand());
        data.TransactionsInEpoch = transactionsInEpoch.Count();
        Task<GetCurrentEpoch.GetCurrentEpochResponse> currentEpoch = _mediator.Send(new GetCurrentEpoch.GetCurrentEpochCommand());
        await currentEpoch.ContinueWith(
            s =>
            {
                data.UserEnteredEpoch = s.Result.CurrentEpoch;
            });
        TimeSpan result = stopWatch.Elapsed;
        data.ElapsedTime = String.Format("{0} seconds and {1} miliseconds", result.Seconds, result.Milliseconds);
        StateHasChanged();
    }

    private async void TransactionsInUserEnteredEpoch()
    {
        Stopwatch stopWatch = new Stopwatch();
        stopWatch.Start();
        var transactionsInEpoch = await _mediator.Send(new TransactionsPerEpoch.UserEnteredEochCommand(data.UserEnteredEpoch));
        data.TransactionsInEpoch = transactionsInEpoch.Count();
        TimeSpan result = stopWatch.Elapsed;
        data.ElapsedTime = String.Format("{0} seconds and {1} miliseconds", result.Seconds, result.Milliseconds);
        StateHasChanged();
    }


}
